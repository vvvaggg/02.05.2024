Первым делом установим текстовый редактор VIM и набор компиляторов gcc:
sudo apt install vim
sudo apt install gcc

*
Для любознательных:

мы можем посмотреть версии: 
gcc --version
make --version

!!!
в дальнейшем Вам могут пригодиться справочные страницы, для этого стоит прописать: man название_команды
!!!

*

Для того чтобы открыть текстовый редактор пропишите «vim» и откроется окно, в дальнейшем там мы будем писать код;
Чтобы выйти из текстового редактора необходимо нажать «esc» и написать «:wq», чтобы изменения сохранились.

*
Для удобства Вы можете изменить оформление текстового редактора с помощью команды «vim ~/.vimrc» затем, 
в открывшемся окне напишите «colorscheme» + цвет, который выберете.
*

Теперь приступим к созданию файла, для этого пропишем «vim» + название вашего файла.
vim main.c

Скомпилируем с помощью gcc в простой исполняемый файл.
gcc -o hello main.c

Запустим и увидим, что все работает.
./hello

Создадим файл, содержащий функцию печати – hello.c .
И создадим файл, содержащий прототип функции (интерфейсную часть) – hello.h .
touch hello.c
touch hello.h

И изменим содержание файла main.c .

Скомпилируем файлы в объектный код с помощью команд «gcc –o hello.o –c hello.c ». 
Повторим те же действия с файлом main.c командой «gcc –o main.o –c main.c».

Для того чтобы собрать исполняемый модуль – нужно написать следующую команду: 
gcc -o hello hello.o main.o

Проверим работу:
./hello

Все работает.

Научимся компилировать разделяемые библиотеки. 
С помощью компилятора выполним такую опцию, которая соберет не исполняемый файл, а динамическую библиотеку.
gcc -o libHello.so -shared -fPIC hello.c

*
Так как мы работаем на 64-разрядной системе – нам необходимо указать флажок «-fPIC».
*

Теперь научимся использовать библиотеку.
gcc main.c -L. -lHello -o hello

Но если мы начнем запускать программу, то у нас появится сообщение об ошибке.
Поменяем переменную окружения LD_LIBRARY_PATH. Запустим программу снова и увидим, что все работает.
export LD_LIBRARY_PATH=.
./hello

Разберем утилиту make, это утилита для управления зависимостями. 
Сперва создадим Makefile:

all:	exe lib

exe:	hello.h main.c lib
	gcc main.c -fPIC -L. -lHello -o hello

lib: 	hello.h hello.c
	gcc -shared hello.c -fPIC -o libHello.so

clean:	-rm hello libHello.so 2>/dev/null

Не забываем, чтобы выйти нажимаем «esc» и пишем «:wq».
Напишем просто «make» и увидим, как будет выполнена первая цель, которая приводит к компиляции программы.
(В первой цели не обязательно прописывать "lib", так как в "exe" уже вызывается "lib")

Если прописать «make clean» – сгенерированные файлы будут удалены.
Если написать ещё раз эту команду – появится сообщение об ошибке, и она будет проигнорирована.
Прописав «make lib», мы увидим, что соберется только библиотека.
