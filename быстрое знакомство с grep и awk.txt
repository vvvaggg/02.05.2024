Команда grep выполняет поиск в файле с использованием регулярных выражений. Она имеет следующий формат:
grep [OPTIONS] PATTERNS [FILE]

В качестве обязательного аргумента PATTERNS она принимает шаблон текста, который надо найти. Если команде передан аргумент FILE, то он используется в качестве файла для поиска текста. И необязательный параметр OPTIONS позволяет настроить применение шаблона для поиска текста.
Например, найдем текст "127.0." в файле /etc/hosts:
grep "127.0." /etc/hosts

Другой пример - найдем в домашнем каталоге пользователя папки и файлы, названия которых начинаются на "Do":
ls ~ | grep "Do"



Основные элементы регулярных выражений:

^: указывает, что соответствие шаблону должно находиться в начале строки. Например, найдем строки, которые начинаются на символ "s":
ls ~ | grep "^s"

$: указывает, что соответствие шаблону должно находиться в конце строки. Например, найдем все файлы с расширением "txt":
ls ~ | grep "\.txt$"

.: соответствует любому символу. 
Найдем все строки, которые содержат "Tim" или "Tom":
grep "T.m" test.txt

 []: указывает символы в регулярном выражении, которые следует интерпретировать как альтернативы. Например, найдем все строки, которые содержат "Tum" или "Tom":
grep "T[ou]m" test.txt

[^ ]: игнорирует все символы после знака ^. Например, найдем все строки, которые НЕ содержат "Tum" или "Tom":
grep "T[^ou]m" test.txt

-: определяет диапазон символов, которому должен соответствовать символ. Например, найдем все строки, которые начинаются с цифрового символа:
grep "^0-9" test.txt

\: позволяет экранировать спец. символы. Например, символ точки . рассматривается как заменитель произвольного символа. Но если нам надо указать, что текст должен содержать именно точку как стандартный символ, то нам надо использовать "\.". Например, найдем в папке загрузок все файлы, которые имеют расширение tar.gz:
ls ~/Downloads | grep "\.tar\.gz"

*: указывает, что предыдущее регулярное выражение может встречаться один раз, несколько раз или не встречаться вообще

?: указывает, что предыдущее регулярное выражение может встречаться один раз или может отсутствовать

+: указывает, что предыдущее регулярное выражение может встречаться один или более раз

\{n\}: указывает, что предыдущий символ может встречаться как минимум n раз. Например, найдем строки, где есть два буквы o подряд:
grep "o\{2\}" test.txt



Утилита awk представляет еще один мощный инструмент для работы с текстовыми файлами, предоставляя множество возможностей. Команда awk имеет следующий формат:
awk '/pattern/{action}' file

Сначала команде awk передается параметр pattern - шаблон (регулярное выражение), которому должен сооответствовать текст. Обычно шаблоны заключаются между косыми чертами. Далее идет параметр action, который задает действия над найденным соответствием. Действия заключаются в фигурные скобки. Поскольку awk работает с регулярными выражениями, то шаблон разумно помещать в одинарные кавычки, чтобы оболочка случайно не интерпретировала их.
Если шаблон не указан, то действие выполняется над каждой строкой файла. Если действие не указано, awk просто показывает строки, соответствующие шаблону.

Условно говоря, каждая строка содержит данные пользователя - имя, возраст, компанию, то есть три поля. И каждое поле отделено от других двоеточием. То есть каждая строка имеет формат имя:возраст:компания
Допустим, нам надо получить все строки, где имя пользователя - "Tom":
awk '/Tom/' users.txt

Утилита awk предоставляет ряд интересных возможностей, в частности, awk позволяет работать с файлами в табличной структурой, как наш файл. Например, для awk разделителем полей в строке по умолчанию является пробел. Однако в нашем файле таким разделителем является двоеточие. С помощью опции -F можно установить символ, который будет применяться в качестве разделителя.
Например, выведем только компанию, в которой работают пользователи с именем "Tom":
awk -F : '/Tom/{print $3}' users.txt

Здесь опции -F передается разделитель - двоеточие. Кроме того, здесь добавлено действие - встроенная команда awk - print, которая вывыодит передаенное ей значение. Ей передается значение $3 - это значение 3-го столбца. В нашем случае 1-й столбец представляет имя, 2-й столбец - возраст и 3-й - компанию. Специальное значение - $0 означает всю строку.
Если бы мы хотели вывести компанию для всех пользователей, то можно было опустить шаблон:
awk -F : '{print $3}' users.txt

Поскольку awk может ссылаться на определенные поля, можно также сравнивать поля друг с другом. Для этой цели доступны следующие операторы:
==: Равно (ищет поле с тем же значением)

!=: Не равно

<: меньше, чем

<=: меньше или равно

>: Больше, чем

>=: больше или равно

С помощью этих операторов вы можете выполнять некоторые вычисления с текстовыми файлами. Например, выведем пользователей, у которых возраст больше 30:
awk -F : '$2 > 30 {print $1}' users.txt
